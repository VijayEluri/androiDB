/*
 * Copyright (C) 2006 The Android Open Source Project
 * Copyright (C) 2010 Matthias Brandt
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package android.database.sqlite;

import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class SQLiteDatabasee extends android.database.sqlite.SQLiteClosable {
	public static interface CursorFactory {
		public abstract android.database.Cursor newCursor(android.database.sqlite.SQLiteDatabase db,
				android.database.sqlite.SQLiteCursorDriver masterQuery, java.lang.String editTable,
				android.database.sqlite.SQLiteQuery query);
	}

	Connection connection;

	SQLiteDatabase(final File dbFile) {
		try {
			DriverManager.getConnection("jdbc:sqlite::memory:");
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}
	}

	@Override
	protected void onAllReferencesReleased() {
		throw new RuntimeException("Stub!");
	}

	public static native int releaseMemory();

	public void setLockingEnabled(final boolean lockingEnabled) {
		throw new RuntimeException("Stub!");
	}

	public void beginTransaction() {
		throw new RuntimeException("Stub!");
	}

	public void endTransaction() {
		throw new RuntimeException("Stub!");
	}

	public void setTransactionSuccessful() {
		throw new RuntimeException("Stub!");
	}

	public boolean inTransaction() {
		throw new RuntimeException("Stub!");
	}

	public boolean isDbLockedByCurrentThread() {
		throw new RuntimeException("Stub!");
	}

	public boolean isDbLockedByOtherThreads() {
		throw new RuntimeException("Stub!");
	}

	public boolean yieldIfContended() {
		throw new RuntimeException("Stub!");
	}

	public boolean yieldIfContendedSafely() {
		throw new RuntimeException("Stub!");
	}

	public java.util.Map<java.lang.String, java.lang.String> getSyncedTables() {
		throw new RuntimeException("Stub!");
	}

	public static android.database.sqlite.SQLiteDatabase openDatabase(final java.lang.String path,
			final android.database.sqlite.SQLiteDatabase.CursorFactory factory, final int flags) {
		throw new RuntimeException("Stub!");
	}

	public static android.database.sqlite.SQLiteDatabase openOrCreateDatabase(final java.io.File file,
			final android.database.sqlite.SQLiteDatabase.CursorFactory factory) {
		throw new RuntimeException("Stub!");
	}

	public static android.database.sqlite.SQLiteDatabase openOrCreateDatabase(final java.lang.String path,
			final android.database.sqlite.SQLiteDatabase.CursorFactory factory) {
		SQLiteDatabase db = new SQLiteDatabase(new File(path));
		return db;
	}

	public static android.database.sqlite.SQLiteDatabase create(
			final android.database.sqlite.SQLiteDatabase.CursorFactory factory) {
		throw new RuntimeException("Stub!");
	}

	public void close() {
		try {
			connection.close();
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}
	}

	public int getVersion() {
		throw new RuntimeException("Stub!");
	}

	public void setVersion(final int version) {
		throw new RuntimeException("Stub!");
	}

	public long getMaximumSize() {
		throw new RuntimeException("Stub!");
	}

	public long setMaximumSize(final long numBytes) {
		throw new RuntimeException("Stub!");
	}

	public long getPageSize() {
		throw new RuntimeException("Stub!");
	}

	public void setPageSize(final long numBytes) {
		throw new RuntimeException("Stub!");
	}

	public void markTableSyncable(final java.lang.String table, final java.lang.String deletedTable) {
		throw new RuntimeException("Stub!");
	}

	public void markTableSyncable(final java.lang.String table, final java.lang.String foreignKey,
			final java.lang.String updateTable) {
		throw new RuntimeException("Stub!");
	}

	public static java.lang.String findEditTable(final java.lang.String tables) {
		throw new RuntimeException("Stub!");
	}

	public android.database.sqlite.SQLiteStatement compileStatement(final java.lang.String sql)
			throws android.database.SQLException {
		throw new RuntimeException("Stub!");
	}

	public android.database.Cursor query(final boolean distinct, final java.lang.String table,
			final java.lang.String[] columns, final java.lang.String selection, final java.lang.String[] selectionArgs,
			final java.lang.String groupBy, final java.lang.String having, final java.lang.String orderBy,
			final java.lang.String limit) {
		throw new RuntimeException("Stub!");
	}

	public android.database.Cursor queryWithFactory(
			final android.database.sqlite.SQLiteDatabase.CursorFactory cursorFactory, final boolean distinct,
			final java.lang.String table, final java.lang.String[] columns, final java.lang.String selection,
			final java.lang.String[] selectionArgs, final java.lang.String groupBy, final java.lang.String having,
			final java.lang.String orderBy, final java.lang.String limit) {
		throw new RuntimeException("Stub!");
	}

	public android.database.Cursor query(final java.lang.String tableName, final java.lang.String[] columns,
			final java.lang.String selection, final java.lang.String[] selectionArgs, final java.lang.String groupBy,
			final java.lang.String having, final java.lang.String orderBy) {
		try {
			if (selectionArgs != null || groupBy != null || having != null || orderBy != null) {
				throw new RuntimeException("not implementend");
			}
			Statement statement = connection.createStatement();
			StringBuffer select = new StringBuffer();
			select.append("SELECT ");
			select.append(columns);
			select.append(" WHERE ");
			select.append(selection);
			ResultSet result = statement.executeQuery(select.toString());
			return new TestableCursor(result);
		} catch (Exception e) {
			throw new RuntimeException(e);
		} finally {
			close();
		}
	}

	public android.database.Cursor query(final java.lang.String table, final java.lang.String[] columns,
			final java.lang.String selection, final java.lang.String[] selectionArgs, final java.lang.String groupBy,
			final java.lang.String having, final java.lang.String orderBy, final java.lang.String limit) {
		throw new RuntimeException("Stub!");
	}

	public android.database.Cursor rawQuery(final java.lang.String sql, final java.lang.String[] selectionArgs) {
		throw new RuntimeException("Stub!");
	}

	public android.database.Cursor rawQueryWithFactory(
			final android.database.sqlite.SQLiteDatabase.CursorFactory cursorFactory, final java.lang.String sql,
			final java.lang.String[] selectionArgs, final java.lang.String editTable) {
		throw new RuntimeException("Stub!");
	}

	public long insert(final java.lang.String table, final java.lang.String nullColumnHack,
			final android.content.ContentValues values) {
		throw new RuntimeException("Stub!");
	}

	public long insertOrThrow(final java.lang.String table, final java.lang.String nullColumnHack,
			final android.content.ContentValues values) throws android.database.SQLException {
		throw new RuntimeException("Stub!");
	}

	public long replace(final java.lang.String table, final java.lang.String nullColumnHack,
			final android.content.ContentValues initialValues) {
		throw new RuntimeException("Stub!");
	}

	public long replaceOrThrow(final java.lang.String table, final java.lang.String nullColumnHack,
			final android.content.ContentValues initialValues) throws android.database.SQLException {
		throw new RuntimeException("Stub!");
	}

	public int delete(final java.lang.String table, final java.lang.String whereClause,
			final java.lang.String[] whereArgs) {
		throw new RuntimeException("Stub!");
	}

	public int update(final java.lang.String table, final android.content.ContentValues values,
			final java.lang.String whereClause, final java.lang.String[] whereArgs) {
		throw new RuntimeException("Stub!");
	}

	public void execSQL(final java.lang.String sql) throws android.database.SQLException {
		throw new RuntimeException("Stub!");
	}

	public void execSQL(final java.lang.String sql, final java.lang.Object[] bindArgs)
			throws android.database.SQLException {
		throw new RuntimeException("Stub!");
	}

	@Override
	protected void finalize() {
		throw new RuntimeException("Stub!");
	}

	public boolean isReadOnly() {
		throw new RuntimeException("Stub!");
	}

	public boolean isOpen() {
		throw new RuntimeException("Stub!");
	}

	public boolean needUpgrade(final int newVersion) {
		throw new RuntimeException("Stub!");
	}

	public final java.lang.String getPath() {
		throw new RuntimeException("Stub!");
	}

	public void setLocale(final java.util.Locale locale) {
		throw new RuntimeException("Stub!");
	}

	public static final int SQLITE_MAX_LIKE_PATTERN_LENGTH = 50000;

	public static final int OPEN_READWRITE = 0;

	public static final int OPEN_READONLY = 1;

	public static final int NO_LOCALIZED_COLLATORS = 16;

	public static final int CREATE_IF_NECESSARY = 268435456;
}
